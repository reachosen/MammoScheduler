Filename: resource_assumptions.py
```python
from dataclasses import dataclass

@dataclass
class ResourceAssumptions:
    total_appointments: int = 0
    positive_screens: int = 0
    current_diagnostic_capacity: int = 0
    current_wait_times: int = 0
    resource_availability: int = 0
    no_show_rates: float = 0.0
    reschedule_rates: float = 0.0

    def set_total_appointments(self, num_appointments):
        self.total_appointments = num_appointments

    def set_positive_screens(self, num_screens):
        self.positive_screens = num_screens

    def set_current_diagnostic_capacity(self, num_capacity):
        self.current_diagnostic_capacity = num_capacity

    def set_current_wait_times(self, wait_times):
        self.current_wait_times = wait_times

    def set_resource_availability(self, avail):
        self.resource_availability = avail

    def set_no_show_rates(self, no_show):
        self.no_show_rates = no_show

    def set_reschedule_rates(self, reschedule):
        self.reschedule_rates = reschedule
```

Filename: diagnostic_appointment.py
```python
from datetime import datetime

class DiagnosticAppointment:
    def __init__(self, patient_name, patient_id, appointment_date):
        self.patient_name = patient_name
        self.patient_id = patient_id
        self.appointment_date = appointment_date

    def __str__(self):
        return f"Patient Name: {self.patient_name}, Patient ID: {self.patient_id}, Appointment Date: {self.appointment_date.strftime('%m/%d/%Y %I:%M %p')}"
```

Filename: scheduler.py
```python
from datetime import datetime, timedelta
from random import random
from diagnostic_appointment import DiagnosticAppointment

class Scheduler:
    def __init__(self, resource_assumptions):
        self.resource_assumptions = resource_assumptions
        self.appointments = []

    def schedule_appointments(self):
        num_appointments = self.resource_assumptions.total_appointments
        num_screens = self.resource_assumptions.positive_screens
        current_capacity = self.resource_assumptions.current_diagnostic_capacity
        current_wait_times = self.resource_assumptions.current_wait_times
        resource_availability = self.resource_assumptions.resource_availability
        no_show_rates = self.resource_assumptions.no_show_rates
        reschedule_rates = self.resource_assumptions.reschedule_rates

        # Calculate the number of appointments that can be scheduled per day
        appointments_per_day = current_capacity * resource_availability

        # Calculate the number of days needed to schedule all appointments
        days_needed = num_appointments / appointments_per_day

        # Calculate the number of days needed to schedule all positive screens
        days_needed_screens = num_screens / appointments_per_day

        # Schedule appointments for positive screens first
        for i in range(int(days_needed_screens)):
            for j in range(int(appointments_per_day)):
                if len(self.appointments) >= num_screens:
                    break
                appointment_date = datetime.now() + timedelta(days=i, minutes=j*60/resource_availability)
                appointment = DiagnosticAppointment(f"Patient {len(self.appointments)+1}", f"ID{len(self.appointments)+1}", appointment_date)
                self.appointments.append(appointment)

        # Schedule remaining appointments
        for i in range(int(days_needed)):
            for j in range(int(appointments_per_day)):
                if len(self.appointments) >= num_appointments:
                    break
                appointment_date = datetime.now() + timedelta(days=i+int(days_needed_screens), minutes=j*60/resource_availability)
                appointment = DiagnosticAppointment(f"Patient {len(self.appointments)+1}", f"ID{len(self.appointments)+1}", appointment_date)
                # Check for no-shows and reschedules
                if random() < no_show_rates:
                    continue
                if random() < reschedule_rates:
                    appointment_date += timedelta(days=1)
                self.appointments.append(appointment)

    def compute_appointments_needed(self):
        num_appointments = self.resource_assumptions.total_appointments
        num_screens = self.resource_assumptions.positive_screens
        current_capacity = self.resource_assumptions.current_diagnostic_capacity
        current_wait_times = self.resource_assumptions.current_wait_times
        resource_availability = self.resource_assumptions.resource_availability
        no_show_rates = self.resource_assumptions.no_show_rates
        reschedule_rates = self.resource_assumptions.reschedule_rates

        # Calculate the number of appointments that can be scheduled per day
        appointments_per_day = current_capacity * resource_availability

        # Calculate the number of days needed to schedule all appointments
        days_needed = num_appointments / appointments_per_day

        # Calculate the number of days needed to schedule all positive screens
        days_needed_screens = num_screens / appointments_per_day

        # Calculate the total number of appointments needed
        appointments_needed = num_screens + (num_appointments - num_screens) * (1 - no_show_rates) * (1 + reschedule_rates) + current_wait_times * appointments_per_day

        # Calculate the number of appointments needed per day
        appointments_needed_per_day = appointments_needed / (7 - current_wait_times)

        return round(appointments_needed_per_day)
```

Filename: main.py
```python
from resource_assumptions import ResourceAssumptions
from scheduler import Scheduler

def main():
    # Initialize resource assumptions
    ra = ResourceAssumptions(total_appointments=100, positive_screens=20, current_diagnostic_capacity=10, current_wait_times=5, resource_availability=3, no_show_rates=0.1, reschedule_rates=0.2)

    # Initialize scheduler
    scheduler = Scheduler(ra)

    # Schedule appointments
    scheduler.schedule_appointments()

    # Compute appointments needed per day
    appointments_needed_per_day = scheduler.compute_appointments_needed()

    # Print results
    print("Resource Assumptions:")
    print(f"Total Appointments: {ra.total_appointments}")
    print(f"Positive Screens: {ra.positive_screens}")
    print(f"Current Diagnostic Capacity: {ra.current_diagnostic_capacity}")
    print(f"Current Wait Times: {ra.current_wait_times}")
    print(f"Resource Availability: {ra.resource_availability}")
    print(f"No-Show Rates: {ra.no_show_rates}")
    print(f"Reschedule Rates: {ra.reschedule_rates}")
    print()
    print(f"Number of Diagnostic Appointments Needed per Day: {appointments_needed_per_day}")

if __name__ == "__main__":
    main()
```